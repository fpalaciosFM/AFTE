<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1179px" preserveAspectRatio="none" style="width:1694px;height:1179px;" version="1.1" viewBox="0 0 1694 1179" width="1694px" zoomAndPan="magnify"><defs><filter height="300%" id="f55xmsytcjidt" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[628cc5a2753cca06eb1ffef55c386535]
class Parser--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="297.0469" id="Parser" style="stroke: #A80036; stroke-width: 1.5;" width="273" x="479.5" y="8"/><ellipse cx="593.25" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M595.25,20.5 Q595.4531,20 595.6875,19.75 Q595.9219,19.5 596.1875,19.5 Q596.6563,19.5 596.9531,19.7813 Q597.25,20.0625 597.25,20.7188 L597.25,22.2813 Q597.25,22.9375 596.9688,23.2188 Q596.6875,23.5 596.25,23.5 Q595.8594,23.5 595.6094,23.3281 Q595.3594,23.1563 595.25,22.7031 Q595.2031,22.3906 595.0313,22.2188 Q594.7188,21.8906 594.1563,21.7031 Q593.5938,21.5 593.0313,21.5 Q592.3281,21.5 591.7344,21.7813 Q591.1563,22.0625 590.7031,22.6875 Q590.25,23.3125 590.25,24.1719 L590.25,25.0938 Q590.25,26.125 591.0938,26.8125 Q591.9375,27.5 593.4375,27.5 Q594.3281,27.5 594.9531,27.2969 Q595.3125,27.1875 595.7188,26.8281 Q595.9844,26.625 596.125,26.5625 Q596.2656,26.5 596.4375,26.5 Q596.7656,26.5 597,26.7656 Q597.25,27.0156 597.25,27.375 Q597.25,27.7188 596.9063,28.125 Q596.4063,28.7188 595.6094,29.0469 Q594.5625,29.5 593.2813,29.5 Q591.7813,29.5 590.5781,28.9063 Q589.6094,28.4375 588.9219,27.4219 Q588.25,26.4063 588.25,25.2031 L588.25,24.1094 Q588.25,22.8594 588.8438,21.7656 Q589.4531,20.6719 590.5,20.0938 Q591.5625,19.5 592.75,19.5 Q593.4688,19.5 594.0938,19.75 Q594.7188,20 595.25,20.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="613.75" y="28.9102">Parser</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="480.5" x2="751.5" y1="40" y2="40"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="48"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="499.5" y="55.4189">istream* input</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="61.8359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="26" x="499.5" y="69.2549">int ch</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="75.6719"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="499.5" y="83.0908">char sym[20]</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="89.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="25" x="499.5" y="96.9268">int ks</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="480.5" x2="751.5" y1="103.3438" y2="103.3438"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="111.3438"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="499.5" y="118.7627">void initsym(void)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="125.1797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="499.5" y="132.5986">void getch(void)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="139.0156"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="499.5" y="146.4346">void putch(char c)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="152.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="499.5" y="160.2705">void endsym(void)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="166.6875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="499.5" y="174.1064">void error(const char* msg)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="180.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="499.5" y="187.9424">int test(const char* str)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="194.3594"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="499.5" y="201.7783">int testg(const char* str, const char* mesg = NULL)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="208.1953"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="499.5" y="215.6143">void GetSym(void)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="222.0313"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="499.5" y="229.4502">Node* Primary(void)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="235.8672"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="499.5" y="243.2861">Node* Factor(void)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="249.7031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="499.5" y="257.1221">Node* Term(void)</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="487.5" y="263.5391"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="499.5" y="270.958">Node* Expr(void)</text><ellipse cx="490.5" cy="280.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="499.5" y="284.7939">Parser(istream&amp; is);</text><ellipse cx="490.5" cy="294.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="499.5" y="298.6299">Node* RExp(void);</text><!--MD5=[81c647372006855e3db481ac53c6f271]
class RegExpr--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="255.5391" id="RegExpr" style="stroke: #A80036; stroke-width: 1.5;" width="336" x="806" y="28.5"/><ellipse cx="946.25" cy="44.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M948.25,41 Q948.4531,40.5 948.6875,40.25 Q948.9219,40 949.1875,40 Q949.6563,40 949.9531,40.2813 Q950.25,40.5625 950.25,41.2188 L950.25,42.7813 Q950.25,43.4375 949.9688,43.7188 Q949.6875,44 949.25,44 Q948.8594,44 948.6094,43.8281 Q948.3594,43.6563 948.25,43.2031 Q948.2031,42.8906 948.0313,42.7188 Q947.7188,42.3906 947.1563,42.2031 Q946.5938,42 946.0313,42 Q945.3281,42 944.7344,42.2813 Q944.1563,42.5625 943.7031,43.1875 Q943.25,43.8125 943.25,44.6719 L943.25,45.5938 Q943.25,46.625 944.0938,47.3125 Q944.9375,48 946.4375,48 Q947.3281,48 947.9531,47.7969 Q948.3125,47.6875 948.7188,47.3281 Q948.9844,47.125 949.125,47.0625 Q949.2656,47 949.4375,47 Q949.7656,47 950,47.2656 Q950.25,47.5156 950.25,47.875 Q950.25,48.2188 949.9063,48.625 Q949.4063,49.2188 948.6094,49.5469 Q947.5625,50 946.2813,50 Q944.7813,50 943.5781,49.4063 Q942.6094,48.9375 941.9219,47.9219 Q941.25,46.9063 941.25,45.7031 L941.25,44.6094 Q941.25,43.3594 941.8438,42.2656 Q942.4531,41.1719 943.5,40.5938 Q944.5625,40 945.75,40 Q946.4688,40 947.0938,40.25 Q947.7188,40.5 948.25,41 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="47" x="966.75" y="49.4102">RegExpr</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="807" x2="1141" y1="60.5" y2="60.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="814" y="68.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="45" x="826" y="75.9189">Node* ptr</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="807" x2="1141" y1="82.3359" y2="82.3359"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="814" y="90.3359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="826" y="97.7549">RegExpr(Node*)</text><ellipse cx="817" cy="107.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="826" y="111.5908">RegExpr(void)</text><ellipse cx="817" cy="121.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="826" y="125.4268">RegExpr(const RegExpr&amp;)</text><ellipse cx="817" cy="134.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="826" y="139.2627">~RegExpr()</text><ellipse cx="817" cy="148.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="826" y="153.0986">RegExpr&amp; operator=(const RegExpr&amp; e)</text><ellipse cx="817" cy="162.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="826" y="166.9346">friend ostream&amp; operator&lt;&lt;(ostream&amp; os, const RegExpr&amp; e)</text><ellipse cx="817" cy="176.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="826" y="180.7705">friend istream&amp; operator&gt;&gt;(istream&amp; is, RegExpr&amp; e)</text><ellipse cx="817" cy="190.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="826" y="194.6064">friend RegExpr operator+(const RegExpr&amp; a, const RegExpr&amp; b)</text><ellipse cx="817" cy="204.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="826" y="208.4424">friend RegExpr operator*(const RegExpr&amp; a, const RegExpr&amp; b)</text><ellipse cx="817" cy="217.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="826" y="222.2783">friend RegExpr operator*(const RegExpr&amp; a)</text><ellipse cx="817" cy="231.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="826" y="236.1143">string printTree()</text><ellipse cx="817" cy="245.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="826" y="249.9502">AFTE toAFTE()</text><polygon fill="#4177AF" points="817,255.3672,813,261.3672,821,261.3672" style="stroke: #1963A0; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="159" x="826" y="263.7861">void PrintMat(RegExpr** A, int N);</text><polygon fill="#4177AF" points="817,269.2031,813,275.2031,821,275.2031" style="stroke: #1963A0; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="151" x="826" y="277.6221">void Arden(RegExpr** A, int N);</text><!--MD5=[3fee75583bb7a64f68d843a3c9534ab3]
class Node--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="283.2109" id="Node" style="stroke: #A80036; stroke-width: 1.5;" width="220" x="506" y="365"/><ellipse cx="596.75" cy="381" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M598.75,377.5 Q598.9531,377 599.1875,376.75 Q599.4219,376.5 599.6875,376.5 Q600.1563,376.5 600.4531,376.7813 Q600.75,377.0625 600.75,377.7188 L600.75,379.2813 Q600.75,379.9375 600.4688,380.2188 Q600.1875,380.5 599.75,380.5 Q599.3594,380.5 599.1094,380.3281 Q598.8594,380.1563 598.75,379.7031 Q598.7031,379.3906 598.5313,379.2188 Q598.2188,378.8906 597.6563,378.7031 Q597.0938,378.5 596.5313,378.5 Q595.8281,378.5 595.2344,378.7813 Q594.6563,379.0625 594.2031,379.6875 Q593.75,380.3125 593.75,381.1719 L593.75,382.0938 Q593.75,383.125 594.5938,383.8125 Q595.4375,384.5 596.9375,384.5 Q597.8281,384.5 598.4531,384.2969 Q598.8125,384.1875 599.2188,383.8281 Q599.4844,383.625 599.625,383.5625 Q599.7656,383.5 599.9375,383.5 Q600.2656,383.5 600.5,383.7656 Q600.75,384.0156 600.75,384.375 Q600.75,384.7188 600.4063,385.125 Q599.9063,385.7188 599.1094,386.0469 Q598.0625,386.5 596.7813,386.5 Q595.2813,386.5 594.0781,385.9063 Q593.1094,385.4375 592.4219,384.4219 Q591.75,383.4063 591.75,382.2031 L591.75,381.1094 Q591.75,379.8594 592.3438,378.7656 Q592.9531,377.6719 594,377.0938 Q595.0625,376.5 596.25,376.5 Q596.9688,376.5 597.5938,376.75 Q598.2188,377 598.75,377.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="30" x="617.25" y="385.9102">Node</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="507" x2="725" y1="397" y2="397"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="514" y="405"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="526" y="412.4189">string texStr;</text><ellipse cx="517" cy="421.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="526" y="426.2549">double height;</text><ellipse cx="517" cy="435.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="526" y="440.0908">double width;</text><ellipse cx="517" cy="449.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="526" y="453.9268">const double E = 1.0;</text><ellipse cx="517" cy="463.3438" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="526" y="467.7627">const double N = 1.0;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="507" x2="725" y1="474.1797" y2="474.1797"/><ellipse cx="517" cy="485.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="43" x="526" y="489.5986">~Node();</text><ellipse cx="517" cy="499.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="118" x="526" y="503.4346">int Type(void) const = 0;</text><ellipse cx="517" cy="512.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="526" y="517.2705">Node* Copy(void) const = 0;</text><ellipse cx="517" cy="526.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="526" y="531.1064">Node* Simp(void) const = 0;</text><ellipse cx="517" cy="540.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="526" y="544.9424">ostream&amp; Print(ostream&amp; os) const = 0;</text><ellipse cx="517" cy="554.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="526" y="558.7783">string getTexStr() { return texStr; };</text><ellipse cx="517" cy="568.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="87" x="526" y="572.6143">string printTree();</text><ellipse cx="517" cy="582.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="106" x="526" y="586.4502">string printTree(int&amp;);</text><ellipse cx="517" cy="595.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="526" y="600.2861">void initDims();</text><ellipse cx="517" cy="609.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="79" x="526" y="614.1221">AFTE toAFTE();</text><ellipse cx="517" cy="623.5391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="188" x="526" y="627.958">AFTE toAFTE(double x, double y) = 0;</text><polygon fill="#4177AF" points="517,633.375,513,639.375,521,639.375" style="stroke: #1963A0; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="123" x="526" y="641.7939">void tabs(string&amp; s, int k);</text><!--MD5=[120fced6fc53ed38bb00f3c478c713f1]
class Letter--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="158.6875" id="Letter" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="735" y="749.5"/><ellipse cx="816.25" cy="765.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M818.25,762 Q818.4531,761.5 818.6875,761.25 Q818.9219,761 819.1875,761 Q819.6563,761 819.9531,761.2813 Q820.25,761.5625 820.25,762.2188 L820.25,763.7813 Q820.25,764.4375 819.9688,764.7188 Q819.6875,765 819.25,765 Q818.8594,765 818.6094,764.8281 Q818.3594,764.6563 818.25,764.2031 Q818.2031,763.8906 818.0313,763.7188 Q817.7188,763.3906 817.1563,763.2031 Q816.5938,763 816.0313,763 Q815.3281,763 814.7344,763.2813 Q814.1563,763.5625 813.7031,764.1875 Q813.25,764.8125 813.25,765.6719 L813.25,766.5938 Q813.25,767.625 814.0938,768.3125 Q814.9375,769 816.4375,769 Q817.3281,769 817.9531,768.7969 Q818.3125,768.6875 818.7188,768.3281 Q818.9844,768.125 819.125,768.0625 Q819.2656,768 819.4375,768 Q819.7656,768 820,768.2656 Q820.25,768.5156 820.25,768.875 Q820.25,769.2188 819.9063,769.625 Q819.4063,770.2188 818.6094,770.5469 Q817.5625,771 816.2813,771 Q814.7813,771 813.5781,770.4063 Q812.6094,769.9375 811.9219,768.9219 Q811.25,767.9063 811.25,766.7031 L811.25,765.6094 Q811.25,764.3594 811.8438,763.2656 Q812.4531,762.1719 813.5,761.5938 Q814.5625,761 815.75,761 Q816.4688,761 817.0938,761.25 Q817.7188,761.5 818.25,762 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="31" x="836.75" y="770.4102">Letter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="736" x2="936" y1="781.5" y2="781.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="743" y="789.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="40" x="755" y="796.9189">char ch;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="736" x2="936" y1="803.3359" y2="803.3359"/><ellipse cx="746" cy="814.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="755" y="818.7549">Letter(char c);</text><ellipse cx="746" cy="828.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="65" x="755" y="832.5908">~Letter(void);</text><ellipse cx="746" cy="842.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="100" x="755" y="846.4268">int Type(void) const;</text><ellipse cx="746" cy="855.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="755" y="860.2627">Node* Copy(void) const;</text><ellipse cx="746" cy="869.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="755" y="874.0986">Node* Simp(void) const;</text><ellipse cx="746" cy="883.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="755" y="887.9346">ostream&amp; Print(ostream&amp; os) const;</text><ellipse cx="746" cy="897.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="755" y="901.7705">AFTE toAFTE(double x, double y);</text><!--MD5=[c5e200be6f447a62ff0a64164e765e00]
class Lambda--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="144.8516" id="Lambda" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="6" y="756.5"/><ellipse cx="79.75" cy="772.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M81.75,769 Q81.9531,768.5 82.1875,768.25 Q82.4219,768 82.6875,768 Q83.1563,768 83.4531,768.2813 Q83.75,768.5625 83.75,769.2188 L83.75,770.7813 Q83.75,771.4375 83.4688,771.7188 Q83.1875,772 82.75,772 Q82.3594,772 82.1094,771.8281 Q81.8594,771.6563 81.75,771.2031 Q81.7031,770.8906 81.5313,770.7188 Q81.2188,770.3906 80.6563,770.2031 Q80.0938,770 79.5313,770 Q78.8281,770 78.2344,770.2813 Q77.6563,770.5625 77.2031,771.1875 Q76.75,771.8125 76.75,772.6719 L76.75,773.5938 Q76.75,774.625 77.5938,775.3125 Q78.4375,776 79.9375,776 Q80.8281,776 81.4531,775.7969 Q81.8125,775.6875 82.2188,775.3281 Q82.4844,775.125 82.625,775.0625 Q82.7656,775 82.9375,775 Q83.2656,775 83.5,775.2656 Q83.75,775.5156 83.75,775.875 Q83.75,776.2188 83.4063,776.625 Q82.9063,777.2188 82.1094,777.5469 Q81.0625,778 79.7813,778 Q78.2813,778 77.0781,777.4063 Q76.1094,776.9375 75.4219,775.9219 Q74.75,774.9063 74.75,773.7031 L74.75,772.6094 Q74.75,771.3594 75.3438,770.2656 Q75.9531,769.1719 77,768.5938 Q78.0625,768 79.25,768 Q79.9688,768 80.5938,768.25 Q81.2188,768.5 81.75,769 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="100.25" y="777.4102">Lambda</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="207" y1="788.5" y2="788.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="207" y1="796.5" y2="796.5"/><ellipse cx="17" cy="807.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="26" y="811.9189">Lambda(void);</text><ellipse cx="17" cy="821.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="77" x="26" y="825.7549">~Lambda(void);</text><ellipse cx="17" cy="835.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="100" x="26" y="839.5908">int Type(void) const;</text><ellipse cx="17" cy="849.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="26" y="853.4268">Node* Copy(void) const;</text><ellipse cx="17" cy="862.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="26" y="867.2627">Node* Simp(void) const;</text><ellipse cx="17" cy="876.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="26" y="881.0986">ostream&amp; Print(ostream&amp; os) const;</text><ellipse cx="17" cy="890.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="26" y="894.9346">AFTE toAFTE(double x, double y);</text><!--MD5=[302c72c1573bd1a597976f8c721380e9]
class Empty--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="144.8516" id="Empty" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="243" y="756.5"/><ellipse cx="322.75" cy="772.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M324.75,769 Q324.9531,768.5 325.1875,768.25 Q325.4219,768 325.6875,768 Q326.1563,768 326.4531,768.2813 Q326.75,768.5625 326.75,769.2188 L326.75,770.7813 Q326.75,771.4375 326.4688,771.7188 Q326.1875,772 325.75,772 Q325.3594,772 325.1094,771.8281 Q324.8594,771.6563 324.75,771.2031 Q324.7031,770.8906 324.5313,770.7188 Q324.2188,770.3906 323.6563,770.2031 Q323.0938,770 322.5313,770 Q321.8281,770 321.2344,770.2813 Q320.6563,770.5625 320.2031,771.1875 Q319.75,771.8125 319.75,772.6719 L319.75,773.5938 Q319.75,774.625 320.5938,775.3125 Q321.4375,776 322.9375,776 Q323.8281,776 324.4531,775.7969 Q324.8125,775.6875 325.2188,775.3281 Q325.4844,775.125 325.625,775.0625 Q325.7656,775 325.9375,775 Q326.2656,775 326.5,775.2656 Q326.75,775.5156 326.75,775.875 Q326.75,776.2188 326.4063,776.625 Q325.9063,777.2188 325.1094,777.5469 Q324.0625,778 322.7813,778 Q321.2813,778 320.0781,777.4063 Q319.1094,776.9375 318.4219,775.9219 Q317.75,774.9063 317.75,773.7031 L317.75,772.6094 Q317.75,771.3594 318.3438,770.2656 Q318.9531,769.1719 320,768.5938 Q321.0625,768 322.25,768 Q322.9688,768 323.5938,768.25 Q324.2188,768.5 324.75,769 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="34" x="343.25" y="777.4102">Empty</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="244" x2="444" y1="788.5" y2="788.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="244" x2="444" y1="796.5" y2="796.5"/><ellipse cx="254" cy="807.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="263" y="811.9189">Empty(void);</text><ellipse cx="254" cy="821.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="67" x="263" y="825.7549">~Empty(void);</text><ellipse cx="254" cy="835.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="100" x="263" y="839.5908">int Type(void) const;</text><ellipse cx="254" cy="849.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="263" y="853.4268">Node* Copy(void) const;</text><ellipse cx="254" cy="862.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="263" y="867.2627">Node* Simp(void) const;</text><ellipse cx="254" cy="876.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="263" y="881.0986">ostream&amp; Print(ostream&amp; os) const;</text><ellipse cx="254" cy="890.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="263" y="894.9346">AFTE toAFTE(double x, double y);</text><!--MD5=[c6bc9f6fcd08a3a3434e53294186e5e3]
class BinOp--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="186.3594" id="BinOp" style="stroke: #A80036; stroke-width: 1.5;" width="220" x="480" y="736"/><ellipse cx="568.75" cy="752" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M570.75,748.5 Q570.9531,748 571.1875,747.75 Q571.4219,747.5 571.6875,747.5 Q572.1563,747.5 572.4531,747.7813 Q572.75,748.0625 572.75,748.7188 L572.75,750.2813 Q572.75,750.9375 572.4688,751.2188 Q572.1875,751.5 571.75,751.5 Q571.3594,751.5 571.1094,751.3281 Q570.8594,751.1563 570.75,750.7031 Q570.7031,750.3906 570.5313,750.2188 Q570.2188,749.8906 569.6563,749.7031 Q569.0938,749.5 568.5313,749.5 Q567.8281,749.5 567.2344,749.7813 Q566.6563,750.0625 566.2031,750.6875 Q565.75,751.3125 565.75,752.1719 L565.75,753.0938 Q565.75,754.125 566.5938,754.8125 Q567.4375,755.5 568.9375,755.5 Q569.8281,755.5 570.4531,755.2969 Q570.8125,755.1875 571.2188,754.8281 Q571.4844,754.625 571.625,754.5625 Q571.7656,754.5 571.9375,754.5 Q572.2656,754.5 572.5,754.7656 Q572.75,755.0156 572.75,755.375 Q572.75,755.7188 572.4063,756.125 Q571.9063,756.7188 571.1094,757.0469 Q570.0625,757.5 568.7813,757.5 Q567.2813,757.5 566.0781,756.9063 Q565.1094,756.4375 564.4219,755.4219 Q563.75,754.4063 563.75,753.2031 L563.75,752.1094 Q563.75,750.8594 564.3438,749.7656 Q564.9531,748.6719 566,748.0938 Q567.0625,747.5 568.25,747.5 Q568.9688,747.5 569.5938,747.75 Q570.2188,748 570.75,748.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="34" x="589.25" y="756.9102">BinOp</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="481" x2="699" y1="768" y2="768"/><polygon fill="none" points="491,774,495,778,491,782,487,778" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="500" y="783.4189">Node* left;</text><polygon fill="none" points="491,787.8359,495,791.8359,491,795.8359,487,791.8359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="56" x="500" y="797.2549">Node* right;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="481" x2="699" y1="803.6719" y2="803.6719"/><ellipse cx="491" cy="814.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="500" y="819.0908">BinOp(Node* l, Node* r);</text><ellipse cx="491" cy="828.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="500" y="832.9268">~BinOp(void);</text><ellipse cx="491" cy="842.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="118" x="500" y="846.7627">int Type(void) const = 0;</text><ellipse cx="491" cy="856.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="500" y="860.5986">Node* Copy(void) const = 0;</text><ellipse cx="491" cy="870.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="500" y="874.4346">Node* Simp(void) const = 0;</text><ellipse cx="491" cy="883.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="194" x="500" y="888.2705">ostream&amp; Print(ostream&amp; os) const = 0;</text><ellipse cx="491" cy="897.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="87" x="500" y="902.1064">string printTree();</text><ellipse cx="491" cy="911.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="106" x="500" y="915.9424">string printTree(int&amp;);</text><!--MD5=[9aebfeb8b132906e3ef997bb4bcde53d]
class Closure--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="158.6875" id="Closure" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="252" y="1010"/><ellipse cx="326.75" cy="1026" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M328.75,1022.5 Q328.9531,1022 329.1875,1021.75 Q329.4219,1021.5 329.6875,1021.5 Q330.1563,1021.5 330.4531,1021.7813 Q330.75,1022.0625 330.75,1022.7188 L330.75,1024.2813 Q330.75,1024.9375 330.4688,1025.2188 Q330.1875,1025.5 329.75,1025.5 Q329.3594,1025.5 329.1094,1025.3281 Q328.8594,1025.1563 328.75,1024.7031 Q328.7031,1024.3906 328.5313,1024.2188 Q328.2188,1023.8906 327.6563,1023.7031 Q327.0938,1023.5 326.5313,1023.5 Q325.8281,1023.5 325.2344,1023.7813 Q324.6563,1024.0625 324.2031,1024.6875 Q323.75,1025.3125 323.75,1026.1719 L323.75,1027.0938 Q323.75,1028.125 324.5938,1028.8125 Q325.4375,1029.5 326.9375,1029.5 Q327.8281,1029.5 328.4531,1029.2969 Q328.8125,1029.1875 329.2188,1028.8281 Q329.4844,1028.625 329.625,1028.5625 Q329.7656,1028.5 329.9375,1028.5 Q330.2656,1028.5 330.5,1028.7656 Q330.75,1029.0156 330.75,1029.375 Q330.75,1029.7188 330.4063,1030.125 Q329.9063,1030.7188 329.1094,1031.0469 Q328.0625,1031.5 326.7813,1031.5 Q325.2813,1031.5 324.0781,1030.9063 Q323.1094,1030.4375 322.4219,1029.4219 Q321.75,1028.4063 321.75,1027.2031 L321.75,1026.1094 Q321.75,1024.8594 322.3438,1023.7656 Q322.9531,1022.6719 324,1022.0938 Q325.0625,1021.5 326.25,1021.5 Q326.9688,1021.5 327.5938,1021.75 Q328.2188,1022 328.75,1022.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="347.25" y="1030.9102">Closure</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="253" x2="453" y1="1042" y2="1042"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="253" x2="453" y1="1050" y2="1050"/><ellipse cx="263" cy="1061" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="272" y="1065.4189">Closure(Node* l);</text><ellipse cx="263" cy="1074.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="76" x="272" y="1079.2549">~Closure(void);</text><ellipse cx="263" cy="1088.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="100" x="272" y="1093.0908">int Type(void) const;</text><ellipse cx="263" cy="1102.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="272" y="1106.9268">Node* Copy(void) const;</text><ellipse cx="263" cy="1116.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="272" y="1120.7627">Node* Simp(void) const;</text><ellipse cx="263" cy="1130.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="272" y="1134.5986">ostream&amp; Print(ostream&amp; os) const;</text><ellipse cx="263" cy="1144.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="272" y="1148.4346">void initDims();</text><ellipse cx="263" cy="1157.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="272" y="1162.2705">AFTE toAFTE(double x, double y);</text><!--MD5=[9250c114d84277ed435c526ff3117ab0]
class Concatenation--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="158.6875" id="Concatenation" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="489" y="1010"/><ellipse cx="545.75" cy="1026" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M547.75,1022.5 Q547.9531,1022 548.1875,1021.75 Q548.4219,1021.5 548.6875,1021.5 Q549.1563,1021.5 549.4531,1021.7813 Q549.75,1022.0625 549.75,1022.7188 L549.75,1024.2813 Q549.75,1024.9375 549.4688,1025.2188 Q549.1875,1025.5 548.75,1025.5 Q548.3594,1025.5 548.1094,1025.3281 Q547.8594,1025.1563 547.75,1024.7031 Q547.7031,1024.3906 547.5313,1024.2188 Q547.2188,1023.8906 546.6563,1023.7031 Q546.0938,1023.5 545.5313,1023.5 Q544.8281,1023.5 544.2344,1023.7813 Q543.6563,1024.0625 543.2031,1024.6875 Q542.75,1025.3125 542.75,1026.1719 L542.75,1027.0938 Q542.75,1028.125 543.5938,1028.8125 Q544.4375,1029.5 545.9375,1029.5 Q546.8281,1029.5 547.4531,1029.2969 Q547.8125,1029.1875 548.2188,1028.8281 Q548.4844,1028.625 548.625,1028.5625 Q548.7656,1028.5 548.9375,1028.5 Q549.2656,1028.5 549.5,1028.7656 Q549.75,1029.0156 549.75,1029.375 Q549.75,1029.7188 549.4063,1030.125 Q548.9063,1030.7188 548.1094,1031.0469 Q547.0625,1031.5 545.7813,1031.5 Q544.2813,1031.5 543.0781,1030.9063 Q542.1094,1030.4375 541.4219,1029.4219 Q540.75,1028.4063 540.75,1027.2031 L540.75,1026.1094 Q540.75,1024.8594 541.3438,1023.7656 Q541.9531,1022.6719 543,1022.0938 Q544.0625,1021.5 545.25,1021.5 Q545.9688,1021.5 546.5938,1021.75 Q547.2188,1022 547.75,1022.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="566.25" y="1030.9102">Concatenation</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="490" x2="690" y1="1042" y2="1042"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="490" x2="690" y1="1050" y2="1050"/><ellipse cx="500" cy="1061" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="509" y="1065.4189">Concatenation(Node* l, Node* r);</text><ellipse cx="500" cy="1074.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="509" y="1079.2549">~Concatenation(void);</text><ellipse cx="500" cy="1088.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="100" x="509" y="1093.0908">int Type(void) const;</text><ellipse cx="500" cy="1102.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="509" y="1106.9268">Node* Copy(void) const;</text><ellipse cx="500" cy="1116.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="509" y="1120.7627">Node* Simp(void) const;</text><ellipse cx="500" cy="1130.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="509" y="1134.5986">ostream&amp; Print(ostream&amp; os) const;</text><ellipse cx="500" cy="1144.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="509" y="1148.4346">void initDims();</text><ellipse cx="500" cy="1157.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="509" y="1162.2705">AFTE toAFTE(double x, double y);</text><!--MD5=[2624b266e3584263ddaabf39bb508708]
class Union--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="158.6875" id="Union" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="726" y="1010"/><ellipse cx="806.25" cy="1026" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M808.25,1022.5 Q808.4531,1022 808.6875,1021.75 Q808.9219,1021.5 809.1875,1021.5 Q809.6563,1021.5 809.9531,1021.7813 Q810.25,1022.0625 810.25,1022.7188 L810.25,1024.2813 Q810.25,1024.9375 809.9688,1025.2188 Q809.6875,1025.5 809.25,1025.5 Q808.8594,1025.5 808.6094,1025.3281 Q808.3594,1025.1563 808.25,1024.7031 Q808.2031,1024.3906 808.0313,1024.2188 Q807.7188,1023.8906 807.1563,1023.7031 Q806.5938,1023.5 806.0313,1023.5 Q805.3281,1023.5 804.7344,1023.7813 Q804.1563,1024.0625 803.7031,1024.6875 Q803.25,1025.3125 803.25,1026.1719 L803.25,1027.0938 Q803.25,1028.125 804.0938,1028.8125 Q804.9375,1029.5 806.4375,1029.5 Q807.3281,1029.5 807.9531,1029.2969 Q808.3125,1029.1875 808.7188,1028.8281 Q808.9844,1028.625 809.125,1028.5625 Q809.2656,1028.5 809.4375,1028.5 Q809.7656,1028.5 810,1028.7656 Q810.25,1029.0156 810.25,1029.375 Q810.25,1029.7188 809.9063,1030.125 Q809.4063,1030.7188 808.6094,1031.0469 Q807.5625,1031.5 806.2813,1031.5 Q804.7813,1031.5 803.5781,1030.9063 Q802.6094,1030.4375 801.9219,1029.4219 Q801.25,1028.4063 801.25,1027.2031 L801.25,1026.1094 Q801.25,1024.8594 801.8438,1023.7656 Q802.4531,1022.6719 803.5,1022.0938 Q804.5625,1021.5 805.75,1021.5 Q806.4688,1021.5 807.0938,1021.75 Q807.7188,1022 808.25,1022.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="826.75" y="1030.9102">Union</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="727" x2="927" y1="1042" y2="1042"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="727" x2="927" y1="1050" y2="1050"/><ellipse cx="737" cy="1061" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="746" y="1065.4189">Union(Node* l, Node* r);</text><ellipse cx="737" cy="1074.8359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="65" x="746" y="1079.2549">~Union(void);</text><ellipse cx="737" cy="1088.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="100" x="746" y="1093.0908">int Type(void) const;</text><ellipse cx="737" cy="1102.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="746" y="1106.9268">Node* Copy(void) const;</text><ellipse cx="737" cy="1116.3438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="119" x="746" y="1120.7627">Node* Simp(void) const;</text><ellipse cx="737" cy="1130.1797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="746" y="1134.5986">ostream&amp; Print(ostream&amp; os) const;</text><ellipse cx="737" cy="1144.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="746" y="1148.4346">void initDims();</text><ellipse cx="737" cy="1157.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="170" x="746" y="1162.2705">AFTE toAFTE(double x, double y);</text><!--MD5=[467d2476e06e261a40ff7a4ca1185f7a]
class AFTE--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="241.7031" id="AFTE" style="stroke: #A80036; stroke-width: 1.5;" width="463" x="774.5" y="385.5"/><ellipse cx="987.25" cy="401.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M989.25,398 Q989.4531,397.5 989.6875,397.25 Q989.9219,397 990.1875,397 Q990.6563,397 990.9531,397.2813 Q991.25,397.5625 991.25,398.2188 L991.25,399.7813 Q991.25,400.4375 990.9688,400.7188 Q990.6875,401 990.25,401 Q989.8594,401 989.6094,400.8281 Q989.3594,400.6563 989.25,400.2031 Q989.2031,399.8906 989.0313,399.7188 Q988.7188,399.3906 988.1563,399.2031 Q987.5938,399 987.0313,399 Q986.3281,399 985.7344,399.2813 Q985.1563,399.5625 984.7031,400.1875 Q984.25,400.8125 984.25,401.6719 L984.25,402.5938 Q984.25,403.625 985.0938,404.3125 Q985.9375,405 987.4375,405 Q988.3281,405 988.9531,404.7969 Q989.3125,404.6875 989.7188,404.3281 Q989.9844,404.125 990.125,404.0625 Q990.2656,404 990.4375,404 Q990.7656,404 991,404.2656 Q991.25,404.5156 991.25,404.875 Q991.25,405.2188 990.9063,405.625 Q990.4063,406.2188 989.6094,406.5469 Q988.5625,407 987.2813,407 Q985.7813,407 984.5781,406.4063 Q983.6094,405.9375 982.9219,404.9219 Q982.25,403.9063 982.25,402.7031 L982.25,401.6094 Q982.25,400.3594 982.8438,399.2656 Q983.4531,398.1719 984.5,397.5938 Q985.5625,397 986.75,397 Q987.4688,397 988.0938,397.25 Q988.7188,397.5 989.25,398 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="29" x="1007.75" y="406.4102">AFTE</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="775.5" x2="1236.5" y1="417.5" y2="417.5"/><ellipse cx="785.5" cy="428.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="794.5" y="432.9189">AFTE_State* initialState;</text><ellipse cx="785.5" cy="442.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="794.5" y="446.7549">AFTE_State* finalState;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="775.5" x2="1236.5" y1="453.1719" y2="453.1719"/><ellipse cx="785.5" cy="464.1719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="794.5" y="468.5908">AFTE(AFTE_State* qi, AFTE_State* qf);</text><ellipse cx="785.5" cy="478.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="794.5" y="482.4268">~AFTE();</text><ellipse cx="785.5" cy="491.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="428" x="794.5" y="496.2627">unordered_set&lt;AFTE_State*&gt; RelationR(unordered_set&lt;AFTE_State*&gt; conjunto, char c);</text><ellipse cx="785.5" cy="505.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="794.5" y="510.0986">unordered_set&lt;AFTE_State*&gt; RelationE(unordered_set&lt;AFTE_State*&gt; conjunto);</text><ellipse cx="785.5" cy="519.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="361" x="794.5" y="523.9346">unordered_set&lt;AFTE_State*&gt; read(unordered_set&lt;AFTE_State*&gt;, char c);</text><ellipse cx="785.5" cy="533.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="794.5" y="537.7705">unordered_set&lt;AFTE_State*&gt; read(stringstream* ss);</text><ellipse cx="785.5" cy="547.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="794.5" y="551.6064">bool isFinal(unordered_set&lt;AFTE_State*&gt; conjunto);</text><ellipse cx="785.5" cy="561.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="794.5" y="565.4424">bool recognize(stringstream* ss);</text><ellipse cx="785.5" cy="574.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="794.5" y="579.2783">string toString();</text><ellipse cx="785.5" cy="588.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="794.5" y="593.1143">string toString(AFTE_State*, unordered_set&lt;AFTE_State*&gt;);</text><ellipse cx="785.5" cy="602.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="794.5" y="606.9502">string toDiagram();</text><ellipse cx="785.5" cy="616.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="437" x="794.5" y="620.7861">void toDiagram(AFTE_State*, unordered_set&lt;AFTE_State*&gt;*, string* nodes, string* edges);</text><!--MD5=[b51a98ae3a66144ebdb31d9127ec8c8c]
class AFTE_State--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="241.7031" id="AFTE_State" style="stroke: #A80036; stroke-width: 1.5;" width="342" x="972" y="708"/><ellipse cx="1106.75" cy="724" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1108.75,720.5 Q1108.9531,720 1109.1875,719.75 Q1109.4219,719.5 1109.6875,719.5 Q1110.1563,719.5 1110.4531,719.7813 Q1110.75,720.0625 1110.75,720.7188 L1110.75,722.2813 Q1110.75,722.9375 1110.4688,723.2188 Q1110.1875,723.5 1109.75,723.5 Q1109.3594,723.5 1109.1094,723.3281 Q1108.8594,723.1563 1108.75,722.7031 Q1108.7031,722.3906 1108.5313,722.2188 Q1108.2188,721.8906 1107.6563,721.7031 Q1107.0938,721.5 1106.5313,721.5 Q1105.8281,721.5 1105.2344,721.7813 Q1104.6563,722.0625 1104.2031,722.6875 Q1103.75,723.3125 1103.75,724.1719 L1103.75,725.0938 Q1103.75,726.125 1104.5938,726.8125 Q1105.4375,727.5 1106.9375,727.5 Q1107.8281,727.5 1108.4531,727.2969 Q1108.8125,727.1875 1109.2188,726.8281 Q1109.4844,726.625 1109.625,726.5625 Q1109.7656,726.5 1109.9375,726.5 Q1110.2656,726.5 1110.5,726.7656 Q1110.75,727.0156 1110.75,727.375 Q1110.75,727.7188 1110.4063,728.125 Q1109.9063,728.7188 1109.1094,729.0469 Q1108.0625,729.5 1106.7813,729.5 Q1105.2813,729.5 1104.0781,728.9063 Q1103.1094,728.4375 1102.4219,727.4219 Q1101.75,726.4063 1101.75,725.2031 L1101.75,724.1094 Q1101.75,722.8594 1102.3438,721.7656 Q1102.9531,720.6719 1104,720.0938 Q1105.0625,719.5 1106.25,719.5 Q1106.9688,719.5 1107.5938,719.75 Q1108.2188,720 1108.75,720.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="1127.25" y="728.9102">AFTE_State</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="973" x2="1313" y1="740" y2="740"/><ellipse cx="983" cy="751" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="44" x="992" y="755.4189">int count;</text><ellipse cx="983" cy="764.8359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="316" x="992" y="769.2549">unordered_map&lt;char, unordered_set&lt;AFTE_State*&gt;&gt; transitions;</text><ellipse cx="983" cy="778.6719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="992" y="783.0908">unordered_set&lt;AFTE_State*&gt; lambdas;</text><ellipse cx="983" cy="792.5078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="25" x="992" y="796.9268">int id;</text><ellipse cx="983" cy="806.3438" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="992" y="810.7627">string label;</text><ellipse cx="983" cy="820.1797" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="992" y="824.5986">double x;</text><ellipse cx="983" cy="834.0156" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="992" y="838.4346">double y;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="973" x2="1313" y1="844.8516" y2="844.8516"/><ellipse cx="983" cy="855.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="992" y="860.2705">AFTE_State();</text><ellipse cx="983" cy="869.6875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="992" y="874.1064">AFTE_State(double x, double y);</text><ellipse cx="983" cy="883.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="992" y="887.9424">~AFTE_State();</text><ellipse cx="983" cy="897.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="992" y="901.7783">void addTransition(char c, AFTE_State* q);</text><ellipse cx="983" cy="911.1953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="992" y="915.6143">void addLambda(AFTE_State* q);</text><ellipse cx="983" cy="925.0313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="992" y="929.4502">unordered_set&lt;AFTE_State*&gt; read(char);</text><ellipse cx="983" cy="938.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="992" y="943.2861">string toString();</text><!--MD5=[a71da6d6a9ff0eeb43c077ba83255591]
class AFD--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="255.5391" id="AFD" style="stroke: #A80036; stroke-width: 1.5;" width="404" x="1279" y="378.5"/><ellipse cx="1465.25" cy="394.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1467.25,391 Q1467.4531,390.5 1467.6875,390.25 Q1467.9219,390 1468.1875,390 Q1468.6563,390 1468.9531,390.2813 Q1469.25,390.5625 1469.25,391.2188 L1469.25,392.7813 Q1469.25,393.4375 1468.9688,393.7188 Q1468.6875,394 1468.25,394 Q1467.8594,394 1467.6094,393.8281 Q1467.3594,393.6563 1467.25,393.2031 Q1467.2031,392.8906 1467.0313,392.7188 Q1466.7188,392.3906 1466.1563,392.2031 Q1465.5938,392 1465.0313,392 Q1464.3281,392 1463.7344,392.2813 Q1463.1563,392.5625 1462.7031,393.1875 Q1462.25,393.8125 1462.25,394.6719 L1462.25,395.5938 Q1462.25,396.625 1463.0938,397.3125 Q1463.9375,398 1465.4375,398 Q1466.3281,398 1466.9531,397.7969 Q1467.3125,397.6875 1467.7188,397.3281 Q1467.9844,397.125 1468.125,397.0625 Q1468.2656,397 1468.4375,397 Q1468.7656,397 1469,397.2656 Q1469.25,397.5156 1469.25,397.875 Q1469.25,398.2188 1468.9063,398.625 Q1468.4063,399.2188 1467.6094,399.5469 Q1466.5625,400 1465.2813,400 Q1463.7813,400 1462.5781,399.4063 Q1461.6094,398.9375 1460.9219,397.9219 Q1460.25,396.9063 1460.25,395.7031 L1460.25,394.6094 Q1460.25,393.3594 1460.8438,392.2656 Q1461.4531,391.1719 1462.5,390.5938 Q1463.5625,390 1464.75,390 Q1465.4688,390 1466.0938,390.25 Q1466.7188,390.5 1467.25,391 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="23" x="1485.75" y="399.4102">AFD</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1280" x2="1682" y1="410.5" y2="410.5"/><ellipse cx="1290" cy="421.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="1299" y="425.9189">unordered_set&lt;char&gt; Sigma = {'1', '0'};</text><ellipse cx="1290" cy="435.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="1299" y="439.7549">unordered_set&lt;AFD_State*&gt; states;</text><ellipse cx="1290" cy="449.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1299" y="453.5908">unordered_set&lt;AFD_State*&gt; finalStates;</text><ellipse cx="1290" cy="463.0078" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="378" x="1299" y="467.4268">unordered_map&lt;AFD_State*, unordered_map&lt;char, AFD_State*&gt;&gt; transitions;</text><ellipse cx="1290" cy="476.8438" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="1299" y="481.2627">AFD_State* initialState;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1280" x2="1682" y1="487.6797" y2="487.6797"/><ellipse cx="1290" cy="498.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="40" x="1299" y="503.0986">AFD(){};</text><ellipse cx="1290" cy="512.5156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="1299" y="516.9346">AFD(AFTE);</text><ellipse cx="1290" cy="526.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="46" x="1299" y="530.7705">~AFD(){};</text><ellipse cx="1290" cy="540.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="1299" y="544.6064">void makeTransitions(AFD_State*, AFTE M);</text><ellipse cx="1290" cy="554.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1299" y="558.4424">void addState(AFD_State*, AFTE);</text><ellipse cx="1290" cy="567.8594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="1299" y="572.2783">AFD_State* findEquivalent(AFD_State*);</text><ellipse cx="1290" cy="581.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="1299" y="586.1143">string toString();</text><ellipse cx="1290" cy="595.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="1299" y="599.9502">string toLatexTable();</text><ellipse cx="1290" cy="609.3672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="1299" y="613.7861">string toLatexTableAlpha();</text><ellipse cx="1290" cy="623.2031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="1299" y="627.6221">bool isFinal(AFD_State*);</text><!--MD5=[57dae4e89fd26a6d1f0549625871bee4]
class AFD_State--><rect fill="#FEFECE" filter="url(#f55xmsytcjidt)" height="131.0156" id="AFD_State" style="stroke: #A80036; stroke-width: 1.5;" width="277" x="1349.5" y="763.5"/><ellipse cx="1454.75" cy="779.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1456.75,776 Q1456.9531,775.5 1457.1875,775.25 Q1457.4219,775 1457.6875,775 Q1458.1563,775 1458.4531,775.2813 Q1458.75,775.5625 1458.75,776.2188 L1458.75,777.7813 Q1458.75,778.4375 1458.4688,778.7188 Q1458.1875,779 1457.75,779 Q1457.3594,779 1457.1094,778.8281 Q1456.8594,778.6563 1456.75,778.2031 Q1456.7031,777.8906 1456.5313,777.7188 Q1456.2188,777.3906 1455.6563,777.2031 Q1455.0938,777 1454.5313,777 Q1453.8281,777 1453.2344,777.2813 Q1452.6563,777.5625 1452.2031,778.1875 Q1451.75,778.8125 1451.75,779.6719 L1451.75,780.5938 Q1451.75,781.625 1452.5938,782.3125 Q1453.4375,783 1454.9375,783 Q1455.8281,783 1456.4531,782.7969 Q1456.8125,782.6875 1457.2188,782.3281 Q1457.4844,782.125 1457.625,782.0625 Q1457.7656,782 1457.9375,782 Q1458.2656,782 1458.5,782.2656 Q1458.75,782.5156 1458.75,782.875 Q1458.75,783.2188 1458.4063,783.625 Q1457.9063,784.2188 1457.1094,784.5469 Q1456.0625,785 1454.7813,785 Q1453.2813,785 1452.0781,784.4063 Q1451.1094,783.9375 1450.4219,782.9219 Q1449.75,781.9063 1449.75,780.7031 L1449.75,779.6094 Q1449.75,778.3594 1450.3438,777.2656 Q1450.9531,776.1719 1452,775.5938 Q1453.0625,775 1454.25,775 Q1454.9688,775 1455.5938,775.25 Q1456.2188,775.5 1456.75,776 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="1475.25" y="784.4102">AFD_State</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1350.5" x2="1625.5" y1="795.5" y2="795.5"/><ellipse cx="1360.5" cy="806.5" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="44" x="1369.5" y="810.9189">int count;</text><ellipse cx="1360.5" cy="820.3359" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="25" x="1369.5" y="824.7549">int id;</text><ellipse cx="1360.5" cy="834.1719" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="1369.5" y="838.5908">unordered_set&lt;AFTE_State*&gt;* AFTE_Equivalent;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1350.5" x2="1625.5" y1="845.0078" y2="845.0078"/><ellipse cx="1360.5" cy="856.0078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="1369.5" y="860.4268">AFD_State();</text><ellipse cx="1360.5" cy="869.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="1369.5" y="874.2627">AFD_State(unordered_set&lt;AFTE_State*&gt; conjunto);</text><ellipse cx="1360.5" cy="883.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="1369.5" y="888.0986">~AFD_State(){};</text><!--MD5=[dff15dbde84f57bb4cdb4e998ecd1211]
reverse link Node to Letter--><path d="M723.97,664.79 C744.08,694.08 764.27,723.51 781.87,749.14 " fill="none" id="Node&lt;-Letter" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="718.04,668.53,712.5,648.08,729.58,660.6,718.04,668.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5e94a15632c37af1ff32c35da4e8c64e]
reverse link Node to Lambda--><path d="M487.3,560.84 C408.01,596.69 306.32,648.23 225,708 C205.81,722.1 186.88,739.39 169.99,756.4 " fill="none" id="Node&lt;-Lambda" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="484.54,554.4,505.66,552.63,490.26,567.18,484.54,554.4" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8629a45d2f5999bd39904989f662d24f]
reverse link Node to Empty--><path d="M492.75,652.73 C462.22,688.7 430.83,725.68 404.8,756.36 " fill="none" id="Node&lt;-Empty" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="487.48,648.12,505.76,637.4,498.16,657.18,487.48,648.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0dd6a7e56d177c36a5e561711bf67bf9]
reverse link Node to BinOp--><path d="M602.98,668.05 C601.09,691.35 599.2,714.64 597.47,735.95 " fill="none" id="Node&lt;-BinOp" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="596,667.44,604.6,648.08,609.96,668.58,596,667.44" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5815286f35b1efe3aa3c9ba31d128825]
reverse link BinOp to Closure--><path d="M491.68,937.24 C469.33,961.61 446,987.07 424.98,1009.99 " fill="none" id="BinOp&lt;-Closure" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="486.77,932.24,505.44,922.23,497.09,941.7,486.77,932.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fa5e1c1ad8b4437857bc4015cde34d5f]
reverse link BinOp to Concatenation--><path d="M590,942.43 C590,965.2 590,988.69 590,1009.99 " fill="none" id="BinOp&lt;-Concatenation" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="583,942.23,590,922.23,597,942.23,583,942.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c1369586180278bb0171e07362e245ba]
reverse link BinOp to Union--><path d="M688.32,937.24 C710.67,961.61 734,987.07 755.02,1009.99 " fill="none" id="BinOp&lt;-Union" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="682.91,941.7,674.56,922.23,693.23,932.24,682.91,941.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ca3c20a30d3ae779b541a3f52c505ba3]
reverse link Parser to Node--><path d="M616,318.15 C616,333.75 616,349.5 616,364.89 " fill="none" id="Parser&lt;-Node" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="616,305.08,612,311.08,616,317.08,620,311.08,616,305.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[26f4d5300cc10964e58764e7fd8c28a9]
reverse link RegExpr to Node--><path d="M830.75,293.68 C806.07,317.37 780.73,341.83 757,365 C746.98,374.78 736.61,384.98 726.24,395.22 " fill="none" id="RegExpr&lt;-Node" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="840.17,284.64,833.0708,285.9056,831.5086,292.9454,838.6078,291.6798,840.17,284.64" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[efa744298242ce6d28bc4beb86d516a1]
reverse link AFTE to AFTE_State--><path d="M1062.56,639.82 C1072.2,662.37 1082.16,685.67 1091.65,707.87 " fill="none" id="AFTE&lt;-AFTE_State" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1057.4,627.75,1056.0818,634.8396,1062.1191,638.7831,1063.4373,631.6935,1057.4,627.75" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ab71ee89ed13bf33049e1ad3c5a13505]
reverse link AFD to AFD_State--><path d="M1484.07,647.88 C1484.94,688.04 1485.86,729.88 1486.58,763.12 " fill="none" id="AFD&lt;-AFD_State" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1483.78,634.63,1479.9128,640.7164,1484.0437,646.6271,1487.9109,640.5407,1483.78,634.63" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5a0ad9923f87cfb7dda2ecf5ed1280f8]
reverse link AFTE to AFD--><path d="M1243.04,506.5 C1254.95,506.5 1266.85,506.5 1278.76,506.5 " fill="none" id="AFTE&lt;-AFD" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="1237.93,506.5,1246.93,510.5,1242.93,506.5,1246.93,502.5,1237.93,506.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[14529dfa2697479aa012ae6ec3cff9a3]
reverse link RegExpr to AFTE--><path d="M986.15,289.64 C989.04,321.1 992.12,354.5 994.96,385.39 " fill="none" id="RegExpr&lt;-AFTE" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="#A80036" points="985.69,284.61,982.5285,293.9376,986.1465,289.5891,990.4951,293.2072,985.69,284.61" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1dd518359296116a62c22ab9226be91a]
reverse link Node to AFTE--><path d="M739.3,506.5 C751.02,506.5 762.74,506.5 774.45,506.5 " fill="none" id="Node&lt;-AFTE" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="726.07,506.5,732.07,510.5,738.07,506.5,732.07,502.5,726.07,506.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c459d1af77e02ee0020200c0347d300d]
@startuml

class Parser{
    - istream* input
    - int ch
    - char sym[20]
    - int ks
    - void initsym(void)
    - void getch(void)
    - void putch(char c)
    - void endsym(void)
    - void error(const char* msg)
    - int test(const char* str)
    - int testg(const char* str, const char* mesg = NULL)
    - void GetSym(void)
    - Node* Primary(void)
    - Node* Factor(void)
    - Node* Term(void)
    - Node* Expr(void)
    + Parser(istream& is);
    + Node* RExp(void);
}

class RegExpr {
    - Node* ptr
    - RegExpr(Node*)
    + RegExpr(void)
    + RegExpr(const RegExpr&)
    + ~RegExpr()
    + RegExpr& operator=(const RegExpr& e)
    + friend ostream& operator<<(ostream& os, const RegExpr& e)
    + friend istream& operator>>(istream& is, RegExpr& e)
    + friend RegExpr operator+(const RegExpr& a, const RegExpr& b)
    + friend RegExpr operator*(const RegExpr& a, const RegExpr& b)
    + friend RegExpr operator*(const RegExpr& a)
    + string printTree()
    + AFTE toAFTE()
    ~{static} void PrintMat(RegExpr** A, int N);
    ~{static} void Arden(RegExpr** A, int N);
}

class Node {
    - string texStr;
    + {abstract} ~Node();
    + {abstract} int Type(void) const = 0;
    + {abstract} Node* Copy(void) const = 0;
    + {abstract} Node* Simp(void) const = 0;
    + {abstract} ostream& Print(ostream& os) const = 0;
    + string getTexStr() { return texStr; };
    + {abstract} string printTree();
    + {abstract} string printTree(int&);
    + double height;
    + double width;
    + const double E = 1.0;
    + const double N = 1.0;
    + {abstract} void initDims();
    + {abstract} AFTE toAFTE();
    + {abstract} AFTE toAFTE(double x, double y) = 0;
    ~ {static} void tabs(string& s, int k);
}

class Letter extends Node {
    - char ch;
    + Letter(char c);
    + {abstract} ~Letter(void);
    + {abstract} int Type(void) const;
    + {abstract} Node* Copy(void) const;
    + {abstract} Node* Simp(void) const;
    + {abstract} ostream& Print(ostream& os) const;
    + {abstract} AFTE toAFTE(double x, double y);
}

class Lambda extends Node {
    + Lambda(void);
    + {abstract} ~Lambda(void);
    + {abstract} int Type(void) const;
    + {abstract} Node* Copy(void) const;
    + {abstract} Node* Simp(void) const;
    + {abstract} ostream& Print(ostream& os) const;
    + {abstract} AFTE toAFTE(double x, double y);
}

class Empty extends Node {
    + Empty(void);
    + {abstract} ~Empty(void);
    + {abstract} int Type(void) const;
    + {abstract} Node* Copy(void) const;
    + {abstract} Node* Simp(void) const;
    + {abstract} ostream& Print(ostream& os) const;
    + {abstract} AFTE toAFTE(double x, double y);
}

class BinOp extends Node {
    # Node* left;
    # Node* right;
    + BinOp(Node* l, Node* r);
    + {abstract} ~BinOp(void);
    + {abstract} int Type(void) const = 0;
    + {abstract} Node* Copy(void) const = 0;
    + {abstract} Node* Simp(void) const = 0;
    + {abstract} ostream& Print(ostream& os) const = 0;
    + {abstract} string printTree();
    + {abstract} string printTree(int&);
}

class Closure extends BinOp {
    + Closure(Node* l);
    + {abstract} ~Closure(void);
    + {abstract} int Type(void) const;
    + {abstract} Node* Copy(void) const;
    + {abstract} Node* Simp(void) const;
    + {abstract} ostream& Print(ostream& os) const;
    + {abstract} void initDims();
    + {abstract} AFTE toAFTE(double x, double y);
}

class Concatenation extends BinOp {
    + Concatenation(Node* l, Node* r);
    + ~Concatenation(void);
    + {abstract} int Type(void) const;
    + {abstract} Node* Copy(void) const;
    + {abstract} Node* Simp(void) const;
    + {abstract} ostream& Print(ostream& os) const;
    + {abstract} void initDims();
    + {abstract} AFTE toAFTE(double x, double y);
}

class Union extends BinOp {
    + Union(Node* l, Node* r);
    + {abstract} ~Union(void);
    + {abstract} int Type(void) const;
    + {abstract} Node* Copy(void) const;
    + {abstract} Node* Simp(void) const;
    + {abstract} ostream& Print(ostream& os) const;
    + {abstract} void initDims();
    + {abstract} AFTE toAFTE(double x, double y);
}


class AFTE {
    + AFTE_State* initialState;
    + AFTE_State* finalState;
    + AFTE(AFTE_State* qi, AFTE_State* qf);
    + ~AFTE();
    + unordered_set<AFTE_State*> RelationR(unordered_set<AFTE_State*> conjunto, char c);
    + unordered_set<AFTE_State*> RelationE(unordered_set<AFTE_State*> conjunto);
    + unordered_set<AFTE_State*> read(unordered_set<AFTE_State*>, char c);
    + unordered_set<AFTE_State*> read(stringstream* ss);
    + bool isFinal(unordered_set<AFTE_State*> conjunto);
    + bool recognize(stringstream* ss);
    + string toString();
    + string toString(AFTE_State*, unordered_set<AFTE_State*>);
    + string toDiagram();
    + void toDiagram(AFTE_State*, unordered_set<AFTE_State*>*, string* nodes, string* edges);
}

class AFTE_State {
    + {static} int count;
    + unordered_map<char, unordered_set<AFTE_State*>> transitions;
    + unordered_set<AFTE_State*> lambdas;
    + int id;
    + string label;
    + double x;
    + double y;
    + AFTE_State();
    + AFTE_State(double x, double y);
    + ~AFTE_State();
    + void addTransition(char c, AFTE_State* q);
    + void addLambda(AFTE_State* q);
    + unordered_set<AFTE_State*> read(char);
    + string toString();
}

class AFD {
    + unordered_set<char> Sigma = {'1', '0'};
    + unordered_set<AFD_State*> states;
    + unordered_set<AFD_State*> finalStates;
    + unordered_map<AFD_State*, unordered_map<char, AFD_State*>> transitions;
    + AFD_State* initialState;
    + AFD(){};
    + AFD(AFTE);
    + ~AFD(){};
    + void makeTransitions(AFD_State*, AFTE M);
    + void addState(AFD_State*, AFTE);
    + AFD_State* findEquivalent(AFD_State*);
    + string toString();
    + string toLatexTable();
    + string toLatexTableAlpha();
    + bool isFinal(AFD_State*);
}


class AFD_State {
    + {static} int count;
    + int id;
    + unordered_set<AFTE_State*>* AFTE_Equivalent;
    + AFD_State();
    + AFD_State(unordered_set<AFTE_State*> conjunto);
    + ~AFD_State(){};
}

Parser o- - Node
RegExpr o- - Node
AFTE o-down- AFTE_State
AFD o-down- AFD_State
AFD .left.> AFTE
RegExpr <.. AFTE
Node o-right- AFTE

@enduml

PlantUML version 1.2020.09(Sun May 10 05:51:06 CDT 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.8+10-b944.31
Operating System: Windows 10
Default Encoding: Cp1252
Language: es
Country: MX
--></g></svg>